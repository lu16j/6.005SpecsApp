var testJSON = [
    {"specs":{"f1":{"contains":[],"intersects":["f2"],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(0,0,139,0.3)"},"f2":{"contains":[],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(0,100,0,0.3)"},"f3":{"contains":["f4"],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(169,169,169,0.3)"}},"imples":{"f4":{"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(255,255,0,1)"}}},
    {"specs":{"f1":{"contains":["f7"],"intersects":["f2","f3"],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(255,0,255,0.3)"},"f2":{"contains":[],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(255,255,0,0.3)"},"f3":{"contains":[],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(0,139,139,0.3)"},"f4":{"contains":["f5","f6"],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(128,0,0,0.3)"},"f5":{"contains":["f6"],"intersects":[],"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(0,0,255,0.3)"}},"imples":{"f6":{"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(255,0,255,1)"},"f7":{"text":"boolean f1(int a, int b) {...}\n@requires a, b are integers\n@effects true if equal, false otherwise","color":"rgba(255,0,0,1)"}}},
    {"specs":{"findFirst":{"contains":["findIndex"],"intersects":["findLast"],"text":"int findFirst(item, list) {...}\n@param item the element of interest\n@param list an array possibly containing item\n@returns the index of the first occurrence of item in list if it exists, -1 if it does not","color":"rgba(0,100,0,0.3)"},"findLast":{"contains":[],"intersects":["findFirst"],"text":"int findLast(item, list) {...}\n@param item the element of interest\n@param list an array possibly containing item\n@returns the index of the last occurrence of item in list if it exists, -1 if it does not","color":"rgba(169,169,169,0.3)"},"findAll":{"contains":["findFirst","findLast","findIndex"],"intersects":[],"text":"int[] findAll(item, list) {...}\n@param item the element of interest\n@param list an array possibly containing item\n@returns an array containing the indices of all occurrences of item in list","color":"rgba(128,0,0,0.3)"}},"imples":{"findIndex":{"text":"int findIndex(int item, int[] list) {\n   for(l in list) {\n      if(l == item)\n         return item.indexOf(l);\n   }\n   return -1;\n}","color":"rgba(255,255,0,1)"}}}
];